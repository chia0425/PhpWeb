WITH FilteredLatest AS (
    SELECT t.*
    FROM YourTable t
    CROSS APPLY (
        SELECT MAX(DateColumn) AS MaxDate
        FROM YourTable
        WHERE YEAR(DateColumn) = YEAR(t.DateColumn)
          AND MONTH(DateColumn) = MONTH(t.DateColumn)
          AND YEAR(DateColumn) = 2017
    ) m
    WHERE t.DateColumn = m.MaxDate
      AND YEAR(t.DateColumn) = 2017
),

SharedServerAdjusted AS (
    SELECT
        fl.*,
        CASE 
            WHEN s.HostingType IN ('type1', 'type2') THEN 'retail'
            ELSE 'gov'
        END AS AdjustedLOB
    FROM FilteredLatest fl
    LEFT JOIN Table2 s ON fl.SerialNumber = s.SerialNumber
    WHERE fl.Type = 'physical server' AND fl.LOB = 'shared server'
),

QuarterlySums AS (
    SELECT 
        YEAR(DateColumn) AS Yr,
        DATEPART(QUARTER, DateColumn) AS Quarter,
        CASE 
            WHEN Type = 'physical server' AND LOB = 'shared server' THEN sa.AdjustedLOB
            ELSE LOB
        END AS LOB,
        Type,
        SUM(Quantity) AS QtySum
    FROM FilteredLatest fl
    LEFT JOIN SharedServerAdjusted sa 
        ON fl.SerialNumber = sa.SerialNumber
        AND fl.DateColumn = sa.DateColumn
        AND fl.Type = sa.Type
        AND fl.LOB = sa.LOB
    GROUP BY YEAR(DateColumn), DATEPART(QUARTER, DateColumn),
             CASE 
                WHEN Type = 'physical server' AND LOB = 'shared server' THEN sa.AdjustedLOB
                ELSE LOB
             END,
             Type
),

-- Sum shared servers quantities separately for retail and gov
SharedServerSums AS (
    SELECT
        Yr,
        Quarter,
        SUM(CASE WHEN Type = 'physical server' AND LOB = 'retail' THEN QtySum ELSE 0 END) AS RetailSharedServerSum,
        SUM(CASE WHEN Type = 'physical server' AND LOB = 'gov' THEN QtySum ELSE 0 END) AS GovSharedServerSum,
        SUM(CASE WHEN Type = 'virtual' THEN QtySum ELSE 0 END) AS TotalVirtualSum
    FROM QuarterlySums
    GROUP BY Yr, Quarter
),

-- Sum physical and virtual quantities excluding shared server LOB (they have been reassigned to retail or gov)
PhysicalVirtualSums AS (
    SELECT 
        Yr,
        Quarter,
        LOB,
        SUM(CASE WHEN Type = 'physical server' THEN QtySum ELSE 0 END) AS PhysicalQty,
        SUM(CASE WHEN Type = 'virtual' THEN QtySum ELSE 0 END) AS VirtualQty
    FROM QuarterlySums
    WHERE LOB <> 'shared server'  -- shared server quantities already reassigned
    GROUP BY Yr, Quarter, LOB
)

SELECT
    pvs.Yr,
    pvs.Quarter,
    pvs.LOB,
    -- Add back retail shared server physical quantities ONLY to retail LOB
    CASE 
        WHEN pvs.LOB = 'retail' THEN pvs.PhysicalQty + COALESCE(sss.RetailSharedServerSum, 0)
        ELSE pvs.PhysicalQty
    END AS PhysicalQtyWithRetailSharedAdded,
    pvs.VirtualQty,
    -- Average gov shared server count for the quarter (sum / 3 months)
    COALESCE(sss.GovSharedServerSum, 0) / 3.0 AS SharedServerAvgGov,
    -- VirtualAdd distributed proportional to virtual qty fraction (using only gov shared server sum)
    CASE 
        WHEN COALESCE(sss.TotalVirtualSum, 0) > 0 THEN
            (pvs.VirtualQty / CAST(sss.TotalVirtualSum AS FLOAT)) * (COALESCE(sss.GovSharedServerSum, 0) / 3.0)
        ELSE 0
    END AS VirtualAdd,
    -- Total = Physical (with retail shared added if retail) + VirtualAdd
    CASE 
        WHEN pvs.LOB = 'retail' THEN
            (pvs.PhysicalQty + COALESCE(sss.RetailSharedServerSum, 0)) +
            CASE 
                WHEN COALESCE(sss.TotalVirtualSum, 0) > 0 THEN
                    (pvs.VirtualQty / CAST(sss.TotalVirtualSum AS FLOAT)) * (COALESCE(sss.GovSharedServerSum, 0) / 3.0)
                ELSE 0
            END
        ELSE
            pvs.PhysicalQty +
            CASE 
                WHEN COALESCE(sss.TotalVirtualSum, 0) > 0 THEN
                    (pvs.VirtualQty / CAST(sss.TotalVirtualSum AS FLOAT)) * (COALESCE(sss.GovSharedServerSum, 0) / 3.0)
                ELSE 0
            END
    END AS TotalQty
FROM PhysicalVirtualSums pvs
LEFT JOIN SharedServerSums sss
    ON pvs.Yr = sss.Yr AND pvs.Quarter = sss.Quarter
ORDER BY pvs.Yr, pvs.Quarter, pvs.LOB;
